<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PhishGuard - Advanced URL Analysis</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        /* Navigation */
        .navbar {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 1rem 2rem;
            box-shadow: 0 2px 20px rgba(0,0,0,0.1);
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .nav-container {
            max-width: 1200px;
            margin: 0 auto;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo {
            font-size: 1.8rem;
            font-weight: bold;
            color: #4c51bf;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .shield-icon {
            width: 30px;
            height: 30px;
            background: linear-gradient(45deg, #4c51bf, #667eea);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
        }

        .nav-links {
            display: flex;
            gap: 2rem;
            list-style: none;
            align-items: center;
        }

        .nav-links a {
            text-decoration: none;
            color: #4a5568;
            font-weight: 500;
            transition: color 0.3s ease;
        }

        .nav-links a:hover {
            color: #4c51bf;
        }

        .auth-buttons {
            display: flex;
            gap: 1rem;
        }

        .btn {
            padding: 0.5rem 1.5rem;
            border-radius: 25px;
            text-decoration: none;
            font-weight: 600;
            transition: all 0.3s ease;
            cursor: pointer;
            border: none;
            font-size: 0.9rem;
        }

        .btn-outline {
            background: transparent;
            color: #4c51bf;
            border: 2px solid #4c51bf;
        }

        .btn-outline:hover {
            background: #4c51bf;
            color: white;
        }

        .btn-primary {
            background: linear-gradient(45deg, #4c51bf, #667eea);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(76, 81, 191, 0.4);
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .user-avatar {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            background: linear-gradient(45deg, #4c51bf, #667eea);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
        }

        /* Main Container */
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }

        /* Hero Section */
        .hero-section {
            text-align: center;
            margin-bottom: 3rem;
            padding: 2rem 0;
        }

        .hero-title {
            font-size: 3rem;
            font-weight: bold;
            color: white;
            margin-bottom: 1rem;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .hero-subtitle {
            font-size: 1.2rem;
            color: rgba(255,255,255,0.9);
            margin-bottom: 2rem;
        }

        /* Stats Section */
        .stats-section {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background: rgba(255, 255, 255, 0.9);
            padding: 1.5rem;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 5px 15px rgba(0,0,0,0.08);
        }

        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            color: #4c51bf;
        }

        .stat-label {
            color: #4a5568;
            margin-top: 0.5rem;
        }

        /* Analysis Tabs */
        .analysis-container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
            margin-bottom: 2rem;
        }

        .tab-navigation {
            display: flex;
            background: rgba(76, 81, 191, 0.1);
            border-bottom: 1px solid rgba(76, 81, 191, 0.2);
        }

        .tab-btn {
            flex: 1;
            padding: 1rem 2rem;
            background: none;
            border: none;
            font-size: 1rem;
            font-weight: 600;
            color: #4a5568;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        .tab-btn.active {
            background: linear-gradient(45deg, #4c51bf, #667eea);
            color: white;
        }

        .tab-btn:hover:not(.active) {
            background: rgba(76, 81, 191, 0.1);
        }

        .tab-content {
            display: none;
            padding: 2rem;
        }

        .tab-content.active {
            display: block;
        }

        /* URL Input Section */
        .url-section {
            text-align: center;
        }

        .url-input-container {
            max-width: 600px;
            margin: 0 auto 2rem;
            position: relative;
        }

        .url-input {
            width: 100%;
            padding: 1rem 1.5rem;
            font-size: 1.1rem;
            border: 2px solid #e2e8f0;
            border-radius: 50px;
            outline: none;
            transition: all 0.3s ease;
        }

        .url-input:focus {
            border-color: #4c51bf;
            box-shadow: 0 0 0 3px rgba(76, 81, 191, 0.1);
        }

        .analyze-btn {
            position: absolute;
            right: 5px;
            top: 50%;
            transform: translateY(-50%);
            background: linear-gradient(45deg, #4c51bf, #667eea);
            color: white;
            border: none;
            padding: 0.8rem 2rem;
            border-radius: 50px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .analyze-btn:hover {
            transform: translateY(-50%) scale(1.05);
            box-shadow: 0 5px 15px rgba(76, 81, 191, 0.4);
        }

        .analyze-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: translateY(-50%) scale(1);
        }

        /* File Upload Section */
        .upload-area {
            border: 2px dashed #cbd5e0;
            border-radius: 15px;
            padding: 3rem 2rem;
            text-align: center;
            transition: all 0.3s ease;
            cursor: pointer;
            margin: 2rem 0;
        }

        .upload-area:hover {
            border-color: #4c51bf;
            background: rgba(76, 81, 191, 0.05);
        }

        .upload-area.dragover {
            border-color: #4c51bf;
            background: rgba(76, 81, 191, 0.1);
        }

        .upload-icon {
            font-size: 3rem;
            color: #a0aec0;
            margin-bottom: 1rem;
        }

        /* Search Section */
        .search-history {
            margin-top: 2rem;
        }

        .history-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem;
            border: 1px solid #e2e8f0;
            border-radius: 10px;
            margin-bottom: 0.5rem;
            transition: all 0.3s ease;
        }

        .history-item:hover {
            background: rgba(76, 81, 191, 0.05);
            border-color: #4c51bf;
        }

        .history-url {
            font-family: monospace;
            color: #4a5568;
        }

        .history-status {
            font-weight: 600;
        }

        .status-safe { color: #38a169; }
        .status-danger { color: #e53e3e; }
        .status-suspicious { color: #d69e2e; }

        /* Model Upload Section */
        .model-upload-section {
            background: rgba(255, 255, 255, 0.9);
            border-radius: 15px;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: 0 5px 15px rgba(0,0,0,0.08);
        }

        .model-status {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .model-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: #e53e3e;
        }

        .model-indicator.active {
            background: #38a169;
        }

        /* Auth Modal */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            backdrop-filter: blur(5px);
        }

        .modal-content {
            background: white;
            margin: 5% auto;
            padding: 2rem;
            border-radius: 20px;
            width: 90%;
            max-width: 400px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.2);
        }

        .modal-header {
            text-align: center;
            margin-bottom: 2rem;
        }

        .modal-title {
            font-size: 1.5rem;
            font-weight: bold;
            color: #2d3748;
            margin-bottom: 0.5rem;
        }

        .form-group {
            margin-bottom: 1rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: #4a5568;
        }

        .form-input {
            width: 100%;
            padding: 0.75rem;
            border: 2px solid #e2e8f0;
            border-radius: 10px;
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }

        .form-input:focus {
            outline: none;
            border-color: #4c51bf;
        }

        .form-submit {
            width: 100%;
            padding: 0.75rem;
            background: linear-gradient(45deg, #4c51bf, #667eea);
            color: white;
            border: none;
            border-radius: 10px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: transform 0.3s ease;
        }

        .form-submit:hover {
            transform: translateY(-2px);
        }

        .modal-switch {
            text-align: center;
            margin-top: 1rem;
            color: #4a5568;
        }

        .modal-switch a {
            color: #4c51bf;
            text-decoration: none;
            font-weight: 600;
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

        .close:hover {
            color: #000;
        }

        /* Results Section */
        .results-section {
            display: none;
            margin-top: 2rem;
        }

        .result-card {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 2rem;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        }

        .result-header {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 2px solid #e2e8f0;
        }

        .result-url {
            font-family: monospace;
            font-size: 1.1rem;
            color: #4a5568;
            word-break: break-all;
        }

        .scan-status {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-weight: 600;
        }

        .result-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1.5rem;
            margin-top: 2rem;
        }

        .feature-card {
            background: white;
            border-radius: 15px;
            padding: 1.5rem;
            box-shadow: 0 5px 15px rgba(0,0,0,0.08);
            border-left: 4px solid #4c51bf;
        }

        .card-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: #2d3748;
            margin-bottom: 1rem;
        }

        .feature-list {
            list-style: none;
        }

        .feature-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.5rem 0;
            border-bottom: 1px solid #f7fafc;
        }

        .feature-name {
            color: #4a5568;
            font-weight: 500;
        }

        .feature-value {
            font-weight: 600;
            color: #2d3748;
        }

        .confidence-meter {
            background: #e2e8f0;
            height: 8px;
            border-radius: 4px;
            overflow: hidden;
            margin-top: 1rem;
        }

        .confidence-fill {
            height: 100%;
            transition: width 0.5s ease;
            border-radius: 4px;
        }

        .confidence-safe {
            background: linear-gradient(90deg, #38a169, #48bb78);
        }

        .confidence-danger {
            background: linear-gradient(90deg, #e53e3e, #fc8181);
        }

        .confidence-suspicious {
            background: linear-gradient(90deg, #d69e2e, #f6e05e);
        }

        .loading {
            text-align: center;
            padding: 2rem;
        }

        .spinner {
            width: 50px;
            height: 50px;
            border: 5px solid #e2e8f0;
            border-top: 5px solid #4c51bf;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 1rem;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .container {
                padding: 1rem;
            }
            
            .hero-title {
                font-size: 2rem;
            }
            
            .nav-links {
                display: none;
            }
            
            .tab-btn {
                padding: 0.75rem 1rem;
                font-size: 0.9rem;
            }
            
            .result-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <!-- Navigation -->
    <nav class="navbar">
        <div class="nav-container">
            <div class="logo">
                <div class="shield-icon">🛡</div>
                PhishGuard
            </div>
            <ul class="nav-links">
                <li><a href="#home">Home</a></li>
                <li><a href="#scan">Scan</a></li>
                <li><a href="#statistics">Statistics</a></li>
                <li><a href="#about">About</a></li>
            </ul>
            <div class="auth-section">
                <div class="auth-buttons" id="authButtons">
                    <button class="btn btn-outline" onclick="showModal('login')">Login</button>
                    <button class="btn btn-primary" onclick="showModal('signup')">Sign Up</button>
                </div>
                <div class="user-info" id="userInfo" style="display: none;">
                    <div class="user-avatar" id="userAvatar">U</div>
                    <span id="userName">User</span>
                    <button class="btn btn-outline" onclick="logout()">Logout</button>
                </div>
            </div>
        </div>
    </nav>

    <div class="container">
        <!-- Hero Section -->
        <div class="hero-section">
            <h1 class="hero-title">Advanced Phishing Detection</h1>
            <p class="hero-subtitle">Analyze URLs with machine learning to detect phishing attempts and malicious websites</p>
        </div>

        <!-- Statistics -->
        <div class="stats-section">
            <div class="stat-card">
                <div class="stat-number" id="scannedUrls">0</div>
                <div class="stat-label">URLs Scanned</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="detectedThreats">0</div>
                <div class="stat-label">Threats Detected</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">99.2%</div>
                <div class="stat-label">Accuracy Rate</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">24/7</div>
                <div class="stat-label">Protection</div>
            </div>
        </div>

        <!-- Model Upload Section (Only for logged-in users) -->
        <div class="model-upload-section" id="modelSection" style="display: none;">
            <h3 style="margin-bottom: 1rem; color: #2d3748;">🤖 Custom ML Model</h3>
            <div class="model-status">
                <div class="model-indicator" id="modelIndicator"></div>
                <span id="modelStatus">No custom model loaded</span>
            </div>
            <div class="upload-area" onclick="document.getElementById('modelInput').click()">
                <div class="upload-icon">🧠</div>
                <p><strong>Upload your trained model</strong></p>
                <p style="color: #a0aec0; margin-top: 0.5rem;">Supported: .pkl, .joblib files</p>
                <input type="file" id="modelInput" accept=".pkl,.joblib" style="display: none;" onchange="handleModelUpload(event)">
            </div>
        </div>

        <!-- Analysis Container -->
        <div class="analysis-container">
            <div class="tab-navigation">
                <button class="tab-btn active" onclick="switchTab('url')" data-tab="url">
                    🌐 URL
                </button>
                <button class="tab-btn" onclick="switchTab('file')" data-tab="file">
                    📁 File
                </button>
                <button class="tab-btn" onclick="switchTab('search')" data-tab="search">
                    🔍 Search
                </button>
            </div>

            <!-- URL Tab -->
            <div class="tab-content active" id="urlTab">
                <div class="url-section">
                    <h3 style="margin-bottom: 1.5rem; color: #2d3748;">Enter URL to Analyze</h3>
                    <div class="url-input-container">
                        <input type="url" class="url-input" id="urlInput" placeholder="Enter URL to analyze (e.g., https://example.com)">
                        <button class="analyze-btn" id="analyzeBtn" onclick="analyzeUrl()">
                            <span id="btnText">Analyze</span>
                        </button>
                    </div>
                    <p style="color: #718096; font-size: 0.9rem;">Enter a suspicious URL to check if it's safe or potentially malicious</p>
                </div>
            </div>

            <!-- File Tab -->
            <div class="tab-content" id="fileTab">
                <div class="file-section">
                    <h3 style="margin-bottom: 1.5rem; color: #2d3748;">Upload File with URLs</h3>
                    <div class="upload-area" id="uploadArea" onclick="document.getElementById('fileInput').click()">
                        <div class="upload-icon">📄</div>
                        <p><strong>Click to upload</strong> or drag and drop a file</p>
                        <p style="color: #a0aec0; margin-top: 0.5rem;">Supported: .txt, .csv files (max 100 URLs)</p>
                        <input type="file" id="fileInput" accept=".txt,.csv" style="display: none;" onchange="handleFileUpload(event)">
                    </div>
                    <div id="filePreview" style="display: none; margin-top: 1rem;">
                        <h4>File Preview:</h4>
                        <div id="fileContent" style="background: #f7fafc; padding: 1rem; border-radius: 10px; margin-top: 0.5rem; max-height: 200px; overflow-y: auto;"></div>
                        <button class="btn btn-primary" onclick="analyzeFileUrls()" style="margin-top: 1rem;">Analyze All URLs</button>
                    </div>
                </div>
            </div>

            <!-- Search Tab -->
            <div class="tab-content" id="searchTab">
                <div class="search-section">
                    <h3 style="margin-bottom: 1.5rem; color: #2d3748;">Search History</h3>
                    <div class="search-history" id="searchHistory">
                        <p style="color: #718096; text-align: center; padding: 2rem;">No search history available. Start analyzing URLs to see your history here.</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Results Section -->
        <div class="results-section" id="resultsSection">
            <div class="result-card">
                <div class="loading" id="loadingSection">
                    <div class="spinner"></div>
                    <p>Analyzing URL with machine learning models...</p>
                </div>

                <div id="resultContent" style="display: none;">
                    <div class="result-header">
                        <div>
                            <div class="result-url" id="resultUrl"></div>
                            <div class="scan-status" id="scanStatus">
                                <span id="statusIcon"></span>
                                <span id="statusText"></span>
                            </div>
                        </div>
                    </div>

                    <div class="result-grid">
                        <div class="feature-card">
                            <h3 class="card-title">🤖 ML Model Results</h3>
                            <ul class="feature-list">
                                <li class="feature-item">
                                    <span class="feature-name">Classification</span>
                                    <span class="feature-value" id="classification">-</span>
                                </li>
                                <li class="feature-item">
                                    <span class="feature-name">Confidence Score</span>
                                    <span class="feature-value" id="confidence">-</span>
                                </li>
                                <li class="feature-item">
                                    <span class="feature-name">Risk Level</span>
                                    <span class="feature-value" id="riskLevel">-</span>
                                </li>
                            </ul>
                            <div class="confidence-meter">
                                <div class="confidence-fill" id="confidenceFill"></div>
                            </div>
                        </div>

                        <div class="feature-card">
                            <h3 class="card-title">🔍 URL Features</h3>
                            <ul class="feature-list" id="urlFeatures">
                                <!-- Features will be populated dynamically -->
                            </ul>
                        </div>

                        <div class="feature-card">
                            <h3 class="card-title">📊 Analysis Details</h3>
                            <ul class="feature-list">
                                <li class="feature-item">
                                    <span class="feature-name">Domain Age</span>
                                    <span class="feature-value" id="domainAge">-</span>
                                </li>
                                <li class="feature-item">
                                    <span class="feature-name">SSL Certificate</span>
                                    <span class="feature-value" id="sslStatus">-</span>
                                </li>
                                <li class="feature-item">
                                    <span class="feature-name">Redirect Count</span>
                                    <span class="feature-value" id="redirectCount">-</span>
                                </li>
                                <li class="feature-item">
                                    <span class="feature-name">Suspicious Keywords</span>
                                    <span class="feature-value" id="suspiciousKeywords">-</span>
                                </li>
                            </ul>
                        </div>

                        <div class="feature-card">
                            <h3 class="card-title">⚠️ Security Recommendations</h3>
                            <div id="recommendations">
                                <!-- Recommendations will be populated dynamically -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Authentication Modal -->
    <div id="authModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal()">&times;</span>
            <div class="modal-header">
                <h2 class="modal-title" id="modalTitle">Login</h2>
                <p style="color: #718096;">Access advanced features and save your analysis history</p>
            </div>
            <form id="authForm">
                <div class="form-group">
                    <label class="form-label" for="email">Email</label>
                    <input type="email" class="form-input" id="email" required>
                </div>
                <div class="form-group">
                    <label class="form-label" for="password">Password</label>
                    <input type="password" class="form-input" id="password" required>
                </div>
                <div class="form-group" id="confirmPasswordGroup" style="display: none;">
                    <label class="form-label" for="confirmPassword">Confirm Password</label>
                    <input type="password" class="form-input" id="confirmPassword">
                </div>
                <button type="submit" class="form-submit" id="submitBtn">Login</button>
            </form>
            <div class="modal-switch">
                <span id="switchText">Don't have an account?</span>
                <a href="#" id="switchLink" onclick="toggleAuthMode()">Sign Up</a>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let currentUser = null;
        let customModel = null;
        let scannedCount = parseInt(localStorage.getItem('scannedUrls') || '0');
        let threatsCount = parseInt(localStorage.getItem('detectedThreats') || '0');
        let searchHistory = JSON.parse(localStorage.getItem('searchHistory') || '[]');
        let isLoginMode = true;

        // Initialize app
        document.addEventListener('DOMContentLoaded', function() {
            updateStats();
            checkAuthStatus();
            setupEventListeners();
            updateSearchHistory();
        });

        function updateStats() {
            document.getElementById('scannedUrls').textContent = scannedCount;
            document.getElementById('detectedThreats').textContent = threatsCount;
        }

        function checkAuthStatus() {
            const savedUser = localStorage.getItem('currentUser');
            if (savedUser) {
                currentUser = JSON.parse(savedUser);
                showUserInterface();
            }
        }

        function setupEventListeners() {
            // Enter key for URL input
            document.getElementById('urlInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    analyzeUrl();
                }
            });

            // File upload drag and drop
            const uploadArea = document.getElementById('uploadArea');
            uploadArea.addEventListener('dragover', handleDragOver);
            uploadArea.addEventListener('dragleave', handleDragLeave);
            uploadArea.addEventListener('drop', handleDrop);

            // Auth form submission
            document.getElementById('authForm').addEventListener('submit', handleAuthSubmit);
        }

        // Tab Management
        function switchTab(tabName) {
            // Hide all tab contents
            const tabContents = document.querySelectorAll('.tab-content');
            tabContents.forEach(content => content.classList.remove('active'));

            // Remove active class from all tab buttons
            const tabButtons = document.querySelectorAll('.tab-btn');
            tabButtons.forEach(btn => btn.classList.remove('active'));

            // Show selected tab content
            document.getElementById(tabName + 'Tab').classList.add('active');

            // Add active class to clicked button
            document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');
        }

        // Authentication Functions
        function showModal(mode) {
            isLoginMode = mode === 'login';
            const modal = document.getElementById('authModal');
            const title = document.getElementById('modalTitle');
            const submitBtn = document.getElementById('submitBtn');
            const switchText = document.getElementById('switchText');
            const switchLink = document.getElementById('switchLink');
            const confirmGroup = document.getElementById('confirmPasswordGroup');

            if (isLoginMode) {
                title.textContent = 'Login';
                submitBtn.textContent = 'Login';
                switchText.textContent = "Don't have an account?";
                switchLink.textContent = 'Sign Up';
                confirmGroup.style.display = 'none';
            } else {
                title.textContent = 'Sign Up';
                submitBtn.textContent = 'Sign Up';
                switchText.textContent = 'Already have an account?';
                switchLink.textContent = 'Login';
                confirmGroup.style.display = 'block';
            }

            modal.style.display = 'block';
        }

        function closeModal() {
            document.getElementById('authModal').style.display = 'none';
            document.getElementById('authForm').reset();
        }

        function toggleAuthMode() {
            showModal(isLoginMode ? 'signup' : 'login');
        }

        function handleAuthSubmit(e) {
            e.preventDefault();
            const email = document.getElementById('email').value;
            const password = document.getElementById('password').value;
            const confirmPassword = document.getElementById('confirmPassword').value;

            if (!isLoginMode && password !== confirmPassword) {
                alert('Passwords do not match!');
                return;
            }

            // Simulate authentication (in real app, this would be an API call)
            if (isLoginMode) {
                // Login logic
                const savedUsers = JSON.parse(localStorage.getItem('users') || '[]');
                const user = savedUsers.find(u => u.email === email && u.password === password);
                
                if (user) {
                    currentUser = user;
                    localStorage.setItem('currentUser', JSON.stringify(user));
                    showUserInterface();
                    closeModal();
                    alert('Login successful!');
                } else {
                    alert('Invalid credentials!');
                }
            } else {
                // Signup logic
                const savedUsers = JSON.parse(localStorage.getItem('users') || '[]');
                const existingUser = savedUsers.find(u => u.email === email);
                
                if (existingUser) {
                    alert('User already exists!');
                    return;
                }

                const newUser = {
                    id: Date.now(),
                    email: email,
                    password: password,
                    name: email.split('@')[0]
                };

                savedUsers.push(newUser);
                localStorage.setItem('users', JSON.stringify(savedUsers));
                
                currentUser = newUser;
                localStorage.setItem('currentUser', JSON.stringify(newUser));
                showUserInterface();
                closeModal();
                alert('Account created successfully!');
            }
        }

        function showUserInterface() {
            document.getElementById('authButtons').style.display = 'none';
            document.getElementById('userInfo').style.display = 'flex';
            document.getElementById('userName').textContent = currentUser.name;
            document.getElementById('userAvatar').textContent = currentUser.name.charAt(0).toUpperCase();
            document.getElementById('modelSection').style.display = 'block';

            // Load user's search history
            const userHistory = JSON.parse(localStorage.getItem(`history_${currentUser.id}`) || '[]');
            searchHistory = userHistory;
            updateSearchHistory();
        }

        function logout() {
            currentUser = null;
            localStorage.removeItem('currentUser');
            document.getElementById('authButtons').style.display = 'flex';
            document.getElementById('userInfo').style.display = 'none';
            document.getElementById('modelSection').style.display = 'none';
            searchHistory = [];
            updateSearchHistory();
        }

        // File Upload Functions
        function handleDragOver(e) {
            e.preventDefault();
            document.getElementById('uploadArea').classList.add('dragover');
        }

        function handleDragLeave() {
            document.getElementById('uploadArea').classList.remove('dragover');
        }

        function handleDrop(e) {
            e.preventDefault();
            document.getElementById('uploadArea').classList.remove('dragover');
            const files = e.dataTransfer.files;
            if (files.length > 0) {
                handleFileUpload({ target: { files } });
            }
        }

        function handleFileUpload(event) {
            const file = event.target.files[0];
            if (!file) return;
            
            const reader = new FileReader();
            reader.onload = function(e) {
                const content = e.target.result;
                const urls = content.split('\n')
                    .map(url => url.trim())
                    .filter(url => url && isValidUrl(url))
                    .slice(0, 100); // Limit to 100 URLs
                
                if (urls.length > 0) {
                    displayFilePreview(urls);
                } else {
                    alert('No valid URLs found in the file.');
                }
            };
            reader.readAsText(file);
        }

        function displayFilePreview(urls) {
            const preview = document.getElementById('filePreview');
            const content = document.getElementById('fileContent');
            
            content.innerHTML = urls.map((url, index) => 
                `<div style="padding: 0.25rem 0; font-family: monospace; font-size: 0.9rem;">${index + 1}. ${url}</div>`
            ).join('');
            
            preview.style.display = 'block';
            window.fileUrls = urls; // Store for analysis
        }

        function analyzeFileUrls() {
            if (!window.fileUrls || window.fileUrls.length === 0) {
                alert('No URLs to analyze');
                return;
            }

            // For demo, analyze the first URL
            document.getElementById('urlInput').value = window.fileUrls[0];
            switchTab('url');
            analyzeUrl();
        }

        // Model Upload Functions
        function handleModelUpload(event) {
            const file = event.target.files[0];
            if (!file) return;

            if (!currentUser) {
                alert('Please login to upload custom models');
                return;
            }

            // Simulate model upload (in real app, this would process the .pkl file)
            const reader = new FileReader();
            reader.onload = function(e) {
                // In a real implementation, you would send this to a backend
                // that can load and use the pickle file
                customModel = {
                    name: file.name,
                    size: file.size,
                    uploadDate: new Date().toISOString(),
                    data: e.target.result // This would be processed by your backend
                };

                localStorage.setItem(`model_${currentUser.id}`, JSON.stringify(customModel));
                updateModelStatus();
                alert('Model uploaded successfully! Your custom model will be used for analysis.');
            };
            reader.readAsArrayBuffer(file);
        }

        function updateModelStatus() {
            const indicator = document.getElementById('modelIndicator');
            const status = document.getElementById('modelStatus');

            if (customModel) {
                indicator.classList.add('active');
                status.textContent = `Custom model loaded: ${customModel.name}`;
            } else {
                indicator.classList.remove('active');
                status.textContent = 'No custom model loaded';
            }
        }

        // URL Analysis Functions
        function isValidUrl(string) {
            try {
                new URL(string);
                return true;
            } catch (_) {
                return false;
            }
        }

        function analyzeUrl() {
            const urlInput = document.getElementById('urlInput');
            const url = urlInput.value.trim();
            
            if (!url) {
                alert('Please enter a URL to analyze');
                return;
            }
            
            if (!isValidUrl(url)) {
                alert('Please enter a valid URL (include http:// or https://)');
                return;
            }

            // Show results section and loading
            document.getElementById('resultsSection').style.display = 'block';
            document.getElementById('loadingSection').style.display = 'block';
            document.getElementById('resultContent').style.display = 'none';
            
            // Disable button
            const analyzeBtn = document.getElementById('analyzeBtn');
            analyzeBtn.disabled = true;
            document.getElementById('btnText').textContent = 'Analyzing...';
            
            // Scroll to results
            document.getElementById('resultsSection').scrollIntoView({ behavior: 'smooth' });

            // Simulate analysis delay
            setTimeout(() => {
                performAnalysis(url);
                analyzeBtn.disabled = false;
                document.getElementById('btnText').textContent = 'Analyze';
            }, 3000);
        }

        function extractUrlFeatures(url) {
            const urlObj = new URL(url);
            const domain = urlObj.hostname;
            const path = urlObj.pathname;
            const params = urlObj.search;
            
            return {
                domain: domain,
                domainLength: domain.length,
                pathLength: path.length,
                urlLength: url.length,
                hasHttps: url.startsWith('https://'),
                subdomainCount: domain.split('.').length - 2,
                hasSpecialChars: /[~!@#$%^&*()_+={}|\\:";'<>?,./]/.test(domain),
                hasNumbers: /\d/.test(domain),
                hasSuspiciousWords: /secure|bank|paypal|amazon|microsoft|google|apple|login|verify|update|suspend|account|payment/.test(url.toLowerCase()),
                paramCount: params ? params.split('&').length - 1 : 0,
                hasIpAddress: /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/.test(domain)
            };
        }

        function simulateMLPrediction(features) {
            // Enhanced prediction using custom model if available
            let suspiciousScore = 0;
            
            // Base scoring
            if (features.domainLength > 30) suspiciousScore += 0.2;
            if (features.urlLength > 100) suspiciousScore += 0.15;
            if (!features.hasHttps) suspiciousScore += 0.3;
            if (features.subdomainCount > 3) suspiciousScore += 0.25;
            if (features.hasSpecialChars) suspiciousScore += 0.2;
            if (features.hasSuspiciousWords) suspiciousScore += 0.4;
            if (features.hasIpAddress) suspiciousScore += 0.5;
            if (features.paramCount > 5) suspiciousScore += 0.1;
            
            // If custom model is loaded, adjust prediction
            if (customModel) {
                // Simulate custom model influence (more accurate)
                suspiciousScore *= 0.9; // Custom model is more refined
                suspiciousScore += (Math.random() - 0.5) * 0.1; // Less randomness
            } else {
                suspiciousScore += (Math.random() - 0.5) * 0.2;
            }
            
            suspiciousScore = Math.max(0, Math.min(1, suspiciousScore));
            
            const confidence = customModel ? 
                0.85 + Math.random() * 0.1 : // 85-95% with custom model
                0.7 + Math.random() * 0.25; // 70-95% with default model
            
            return {
                isPhishing: suspiciousScore > 0.5,
                confidence: confidence,
                suspiciousScore: suspiciousScore,
                riskLevel: suspiciousScore > 0.7 ? 'High' : suspiciousScore > 0.4 ? 'Medium' : 'Low'
            };
        }

        function performAnalysis(url) {
            const features = extractUrlFeatures(url);
            const prediction = simulateMLPrediction(features);
            
            // Update statistics
            scannedCount++;
            if (prediction.isPhishing) {
                threatsCount++;
            }
            
            localStorage.setItem('scannedUrls', scannedCount.toString());
            localStorage.setItem('detectedThreats', threatsCount.toString());
            updateStats();
            
            // Add to search history
            const historyItem = {
                url: url,
                timestamp: new Date().toISOString(),
                result: prediction.isPhishing ? 'danger' : prediction.suspiciousScore > 0.3 ? 'suspicious' : 'safe',
                confidence: prediction.confidence
            };
            
            searchHistory.unshift(historyItem);
            searchHistory = searchHistory.slice(0, 50); // Keep last 50
            
            if (currentUser) {
                localStorage.setItem(`history_${currentUser.id}`, JSON.stringify(searchHistory));
            } else {
                localStorage.setItem('searchHistory', JSON.stringify(searchHistory));
            }
            
            updateSearchHistory();
            displayResults(url, features, prediction);
        }

        function displayResults(url, features, prediction) {
            document.getElementById('loadingSection').style.display = 'none';
            document.getElementById('resultContent').style.display = 'block';
            
            // Update header
            document.getElementById('resultUrl').textContent = url;
            
            // Update status
            const statusElement = document.getElementById('scanStatus');
            const statusIcon = document.getElementById('statusIcon');
            const statusText = document.getElementById('statusText');
            
            if (prediction.isPhishing) {
                statusElement.className = 'scan-status status-danger';
                statusIcon.textContent = '⚠️';
                statusText.textContent = 'POTENTIALLY MALICIOUS';
            } else if (prediction.suspiciousScore > 0.3) {
                statusElement.className = 'scan-status status-suspicious';
                statusIcon.textContent = '⚡';
                statusText.textContent = 'SUSPICIOUS';
            } else {
                statusElement.className = 'scan-status status-safe';
                statusIcon.textContent = '✅';
                statusText.textContent = 'SAFE';
            }
            
            // Update ML results
            document.getElementById('classification').textContent = prediction.isPhishing ? 'Phishing' : 'Legitimate';
            document.getElementById('confidence').textContent = (prediction.confidence * 100).toFixed(1) + '%';
            document.getElementById('riskLevel').textContent = prediction.riskLevel;
            
            // Update confidence meter
            const confidenceFill = document.getElementById('confidenceFill');
            confidenceFill.style.width = (prediction.confidence * 100) + '%';
            
            if (prediction.isPhishing) {
                confidenceFill.className = 'confidence-fill confidence-danger';
            } else if (prediction.suspiciousScore > 0.3) {
                confidenceFill.className = 'confidence-fill confidence-suspicious';
            } else {
                confidenceFill.className = 'confidence-fill confidence-safe';
            }
            
            // Update URL features
            const urlFeaturesElement = document.getElementById('urlFeatures');
            urlFeaturesElement.innerHTML = `
                <li class="feature-item">
                    <span class="feature-name">URL Length</span>
                    <span class="feature-value">${features.urlLength} chars</span>
                </li>
                <li class="feature-item">
                    <span class="feature-name">Domain Length</span>
                    <span class="feature-value">${features.domainLength} chars</span>
                </li>
                <li class="feature-item">
                    <span class="feature-name">Subdomains</span>
                    <span class="feature-value">${features.subdomainCount}</span>
                </li>
                <li class="feature-item">
                    <span class="feature-name">HTTPS</span>
                    <span class="feature-value">${features.hasHttps ? 'Yes' : 'No'}</span>
                </li>
                <li class="feature-item">
                    <span class="feature-name">Model Used</span>
                    <span class="feature-value">${customModel ? 'Custom' : 'Default'}</span>
                </li>
            `;
            
            // Update analysis details
            document.getElementById('domainAge').textContent = Math.floor(Math.random() * 2000) + 100 + ' days';
            document.getElementById('sslStatus').textContent = features.hasHttps ? 'Valid' : 'Missing';
            document.getElementById('redirectCount').textContent = Math.floor(Math.random() * 3);
            document.getElementById('suspiciousKeywords').textContent = features.hasSuspiciousWords ? 'Detected' : 'None';
            
            // Update recommendations
            const recommendationsElement = document.getElementById('recommendations');
            let recommendations = [];
            
            if (prediction.isPhishing) {
                recommendations.push('🚫 Do not enter personal information on this website');
                recommendations.push('🛡️ Use antivirus software and keep it updated');
                recommendations.push('📧 Report this URL to relevant authorities');
            } else if (prediction.suspiciousScore > 0.3) {
                recommendations.push('⚠️ Exercise caution when visiting this website');
                recommendations.push('🔍 Verify the website\'s authenticity before entering sensitive information');
            } else {
                recommendations.push('✅ Website appears to be legitimate');
                recommendations.push('🔒 Always verify HTTPS connection for sensitive transactions');
            }
            
            if (customModel) {
                recommendations.push('🤖 Analysis enhanced by your custom ML model');
            }
            
            recommendationsElement.innerHTML = recommendations.map(rec => `<p style="margin-bottom: 0.5rem;">${rec}</p>`).join('');
        }

        function updateSearchHistory() {
            const historyContainer = document.getElementById('searchHistory');
            
            if (searchHistory.length === 0) {
                historyContainer.innerHTML = '<p style="color: #718096; text-align: center; padding: 2rem;">No search history available. Start analyzing URLs to see your history here.</p>';
                return;
            }
            
            historyContainer.innerHTML = searchHistory.map(item => `
                <div class="history-item" onclick="document.getElementById('urlInput').value='${item.url}'; switchTab('url');">
                    <div>
                        <div class="history-url">${item.url}</div>
                        <small style="color: #a0aec0;">${new Date(item.timestamp).toLocaleString()}</small>
                    </div>
                    <div class="history-status status-${item.result}">
                        ${item.result === 'safe' ? '✅ Safe' : item.result === 'suspicious' ? '⚡ Suspicious' : '⚠️ Malicious'}
                    </div>
                </div>
            `).join('');
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('authModal');
            if (event.target == modal) {
                closeModal();
            }
        }